// Example program to fit flexible parametric survival models in Stata
// using the mlad optimizer where likelihood, score (gradient) vector 
// and Hessian matrix calculated in Python.
//
//  Requires
//    Stata: stpm3, gensplines, mlad
//    Python: jax, scipy, importlib, numpy
//
// Paul Lambert 2023-11-29

clear all
cd "${DRIVE}/GitSoftware/mlad/Examples/mlad_fpm

capture log close _all
set linesize 150
log using mlad_example, smcl replace
// Load data
use https://www.pclambert.net/data/rott3, clear

// Use stpm3 model to fit simple model in Stata
// Variables
//   -- hormon (factor variable) 
//   -- age (natural spline)
stpm3  i.hormon @ns(age,df(3)), scale(lncumhazard) df(4) 
estimates store stpm3

// I will use the spline variables created by stpm3 when I use mlad

// Here is a simple way to get initial values
// fit exponential model & use least squares
streg i.hormon _ns_f1_age1 _ns_f1_age2 _ns_f1_age3, dist(exp)
predict surv, surv
gen logcumH = log(-log(surv))
regress logcumH i.hormon _ns_f1_age1 _ns_f1_age2 _ns_f1_age3 _ns1 _ns2 _ns3 _ns4 if _d
// Store inital values
matrix b_init = e(b)

// mlad is an alternative optimizer in Stata
// It calls Python and most calculations are performed within Python
// mlad requires a Python file to define the log-likelhood

// Python likelihood file
// arguments for function are 
//   -- beta - parameters
//   -- X    - data
//   -- wt   - weights (vector of 1's if no weights in mlad)
//   -- M    - dictionary containing othervars etc

// The Python file is only a few lines as the log-likelhood is simple
type fpm_hazard_ll.py

// Note that gradient (score) and Hessian functions are automatically obtained
// from the above when using mlad using automatic differentiation.

// There is an option to include a Python setup file
// It is useful here as we need the derivatives of the log(time) spline variables 
// These are needed within the log-likelihood function
// The setup file is called once before the iterations start.
type fpm_setup.py

// Fit model using mlad
// need to supply the two python files
// Setup two equations as stpm3
//   -- xb equation is for covariates effects
//   -- time equation is for effect of time
// Also the event indicator (_d) and derivatives (_dns1 _dns2 _dns3 _dns4) of
// the spline variables are needed
global dnsvars _dns1 _dns2 _dns3 _dns4
mlad (xb:   = i.hormon _ns_f1_age1 _ns_f1_age2 _ns_f1_age3, nocons ) ///
     (time: = _ns1 _ns2 _ns3 _ns4)                                   ///
     , othervars(_d _dns1 _dns2 _dns3 _dns4)                         ///
       pysetup(fpm_setup)                                            ///
       llfile(fpm_hazard_ll)                                         ///
       init(b_init) search(off)                                                  
estimates store mlad	   
// display estimates       
ml display

// compare estimates and standard errors
estimates table stpm3 mlad, se

// Note: leads to identical estimates
// mlad is faster in large datasets (depending on number of cores)
log close    
translator set smcl2txt linesize 140

translate mlad_example.smcl mlad_example.pdf, translator(smcl2pdf) replace
translate mlad_example.smcl mlad_example.log, translator(smcl2log) replace

// Time comparison
/*
expand 1000
timer clear
timer on 1
stpm3  i.hormon @ns(age,df(3)), scale(lncumhazard) df(4) initmod(exp) verbose
timer off 1

timer on 2
streg i.hormon _ns_f1_age1 _ns_f1_age2 _ns_f1_age3, dist(exp)
predict surv2, surv
gen lncumH = ln(-ln(surv2))
regress lncumH i.hormon _ns_f1_age1 _ns_f1_age2 _ns_f1_age3 _ns1 _ns2 _ns3 _ns4 if _d
mlad (xb:   = i.hormon _ns_f1_age1 _ns_f1_age2 _ns_f1_age3, nocons ) ///
     (time: = _ns1 _ns2 _ns3 _ns4)                                   ///
     , othervars(_d _dns1 _dns2 _dns3 _dns4)                         ///
       pysetup(fpm_setup)                                            ///
       llfile(fpm_hazard_ll)                                         ///
       init(b_init) search(off)                                                
ml display
timer off 2
*/
timer list